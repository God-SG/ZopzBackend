<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ZOPZ SNIFF</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Outfit:wght@400;500;600;700&display=swap">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@sweetalert2/theme-dark@5/dark.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
    <style>
        :root {
            --primary: #7289da;
            --primary-hover: #5865f2;
            --dark: #0f0f0f;
            --darker: #070707;
            --card: #151515;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Outfit', sans-serif;
            background: radial-gradient(circle at 50% 0%, var(--dark), var(--darker));
            min-height: 100vh;
            margin: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #ffffff;
            padding: 2rem 1rem;
            position: relative;
            overflow: hidden;
        }

        body::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle at center, rgba(114, 137, 218, 0.1) 0%, transparent 70%);
            animation: pulse 15s ease-in-out infinite;
            z-index: 0;
        }

        @keyframes pulse {
            0% { transform: scale(1); opacity: 0.5; }
            50% { transform: scale(1.2); opacity: 0.3; }
            100% { transform: scale(1); opacity: 0.5; }
        }

        .container {
            position: relative;
            background: rgba(21, 21, 21, 0.7);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 24px;
            padding: 3rem;
            width: 100%;
            max-width: 440px;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5);
            z-index: 1;
        }

        .logo {
            text-align: center;
            margin-bottom: 2rem;
        }

        .logo svg {
            width: 2.5rem;
            height: 2.5rem;
            color: var(--primary);
            background: rgba(114, 137, 218, 0.1);
            padding: 1rem;
            border-radius: 16px;
            margin-bottom: 1rem;
        }

        h2 {
            font-weight: 700;
            margin-bottom: 0.5rem;
            text-align: center;
            color: #ffffff;
            font-size: 1.75rem;
        }

        .subtitle {
            color: #a0a0a0;
            text-align: center;
            margin-bottom: 2.5rem;
            font-size: 0.95rem;
        }

        .input-group {
            position: relative;
            margin-bottom: 1.5rem;
        }

        .input-group label {
            position: absolute;
            left: 3rem;
            top: 0.85rem;
            color: #666;
            transition: all 0.2s ease;
            pointer-events: none;
        }

        .input-group input {
            width: 100%;
            padding: 0.85rem 1rem 0.85rem 3rem;
            background: rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            color: #fff;
            font-size: 1rem;
            transition: all 0.2s ease;
        }

        .input-group input:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 2px rgba(114, 137, 218, 0.25);
            background: rgba(0, 0, 0, 0.3);
            outline: none;
        }

        .input-group input:focus + label,
        .input-group input:not(:placeholder-shown) + label {
            transform: translateY(-1.5rem);
            font-size: 0.8rem;
            color: var(--primary);
        }

        .input-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #666;
            z-index: 1;
            width: 1.2rem;
            height: 1.2rem;
        }

        .btn {
            width: 100%;
            padding: 1rem;
            border-radius: 12px;
            font-weight: 600;
            font-size: 1rem;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .btn svg {
            width: 1.2rem;
            height: 1.2rem;
        }

        .btn-primary {
            background: var(--primary);
            border: none;
            color: #fff;
        }

        .btn-primary:hover {
            background: var(--primary-hover);
            transform: translateY(-2px);
        }

        .btn-secondary {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            color: #fff;
            margin-top: 1rem;
        }

        .btn-secondary:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .hidden {
            display: none;
            opacity: 0;
            transform: translateY(10px);
        }

        .form-fade-enter {
            animation: fadeIn 0.3s ease forwards;
        }

        .form-fade-exit {
            animation: fadeOut 0.3s ease forwards;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes fadeOut {
            from {
                opacity: 1;
                transform: translateY(0);
            }
            to {
                opacity: 0;
                transform: translateY(-10px);
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/>
            </svg>
        </div>
        <h2 id="formTitle">Welcome Back</h2>
        <p class="subtitle" id="formSubtitle">Sign in to your account</p>

        <div id="loginForm">
            <form id="loginFormElement">
                <div class="input-group">
                    <svg class="input-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                    </svg>
                    <input type="text" id="loginUsername" name="username" placeholder=" " required>
                    <label for="loginUsername">Username</label>
                </div>
                <div class="input-group">
                    <svg class="input-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/>
                    </svg>
                    <input type="password" id="loginPassword" name="password" placeholder=" " required>
                    <label for="loginPassword">Password</label>
                </div>
                <button type="submit" class="btn btn-primary">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1"/>
                    </svg>
                    Sign In
                </button>
            </form>
        </div>

        <div id="registerForm" class="hidden">
            <form id="registerFormElement">
                <div class="input-group">
                    <svg class="input-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                    </svg>
                    <input type="text" id="registerUsername" name="username" placeholder=" " required>
                    <label for="registerUsername">Username</label>
                </div>
                <div class="input-group">
                    <svg class="input-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/>
                    </svg>
                    <input type="password" id="registerPassword" name="password" placeholder=" " required>
                    <label for="registerPassword">Password</label>
                </div>
                <button type="submit" class="btn btn-primary">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z"/>
                    </svg>
                    Create Account
                </button>
            </form>
        </div>

        <button id="toggleForm" class="btn btn-secondary">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"/>
            </svg>
            Create an Account
        </button>
    </div>

    <script>
        const loginForm = document.getElementById('loginForm');
        const registerForm = document.getElementById('registerForm');
        const toggleFormButton = document.getElementById('toggleForm');
        const formTitle = document.getElementById('formTitle');
        const formSubtitle = document.getElementById('formSubtitle');
        const loginFormElement = document.getElementById('loginFormElement');
        const registerFormElement = document.getElementById('registerFormElement');

        // Helper function to parse response based on content type
        async function parseResponse(response) {
            const contentType = response.headers.get('content-type');
            if (contentType && contentType.includes('application/json')) {
                return await response.json();
            } else {
                const text = await response.text();
                return { message: text };
            }
        }

        toggleFormButton.addEventListener('click', () => {
            const isLoginVisible = !loginForm.classList.contains('hidden');
            
            const currentForm = isLoginVisible ? loginForm : registerForm;
            const newForm = isLoginVisible ? registerForm : loginForm;
            
            currentForm.classList.add('form-fade-exit');
            setTimeout(() => {
                currentForm.classList.add('hidden');
                currentForm.classList.remove('form-fade-exit');
                
                newForm.classList.remove('hidden');
                newForm.classList.add('form-fade-enter');
                setTimeout(() => {
                    newForm.classList.remove('form-fade-enter');
                }, 300);
            }, 300);

            formTitle.textContent = isLoginVisible ? 'Create Account' : 'Welcome Back';
            formSubtitle.textContent = isLoginVisible ? 'Register a new account' : 'Sign in to your account';
            toggleFormButton.innerHTML = isLoginVisible ? 
                `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16l-4-4m0 0l4-4m-4 4h18"/>
                </svg>Back to Login` : 
                `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"/>
                </svg>Create an Account`;
        });

        loginFormElement.addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(loginFormElement);
            try {
                const response = await fetch('/auth/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    credentials: 'include',
                    body: JSON.stringify(Object.fromEntries(formData)),
                });
                
                const data = await parseResponse(response);
                
                if (!response.ok) {
                    throw new Error(data.message || 'Login failed');
                }

                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: data.message || 'Logged in successfully',
                    background: '#151515',
                    color: '#fff',
                    confirmButtonColor: '#7289da'
                }).then(() => {
                    window.location.href = '/dash';
                });
               
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Something went wrong',
                    background: '#151515',
                    color: '#fff',
                    confirmButtonColor: '#7289da'
                });
            }
        });

        registerFormElement.addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(registerFormElement);
            try {
                const response = await fetch('/auth/register', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(Object.fromEntries(formData)),
                });
                
                const data = await parseResponse(response);
                
                if (!response.ok) {
                    throw new Error(data.message || 'Registration failed');
                }

                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: data.message || 'Account created successfully',
                    background: '#151515',
                    color: '#fff',
                    confirmButtonColor: '#7289da'
                }).then(() => {
                    // Switch to login form after successful registration
                    if (!loginForm.classList.contains('hidden')) {
                        toggleFormButton.click();
                    }
                });

            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Something went wrong',
                    background: '#151515',
                    color: '#fff',
                    confirmButtonColor: '#7289da'
                });
            }
        });
    </script>
</body>
</html>
